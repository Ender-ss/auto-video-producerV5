"""
ü§ñ Automations Routes
Rotas para automa√ß√µes de conte√∫do com IA
"""

from flask import Blueprint, request, jsonify
from datetime import datetime
import requests
import json
import re
import time
import openai
import os
import base64
import wave
import io

# Import AI libraries
try:
    import google.generativeai as genai
    from ..services.title_generator import TitleGenerator
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False

try:
    import anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False

try:
    import google.genai as google_genai
    from google.genai import types
    GOOGLE_GENAI_TTS_AVAILABLE = True
except ImportError:
    GOOGLE_GENAI_TTS_AVAILABLE = False

automations_bp = Blueprint('automations', __name__)

# ================================
# üß™ TESTE RAPIDAPI
# ================================

@automations_bp.route('/test-rapidapi', methods=['POST'])
def test_rapidapi():
    """Testar conex√£o com RapidAPI YouTube V2"""
    try:
        data = request.get_json()
        api_key = data.get('api_key', '').strip()

        if not api_key:
            return jsonify({
                'success': False,
                'error': 'Chave da API RapidAPI √© obrigat√≥ria'
            }), 400

        # Testar com um canal conhecido
        test_channel = "UCX6OQ3DkcsbYNE6H8uQQuVA"  # MrBeast

        headers = {
            "X-RapidAPI-Key": api_key,
            "X-RapidAPI-Host": "youtube-v2.p.rapidapi.com"
        }

        # Testar endpoint de detalhes do canal
        response = requests.get(
            "https://youtube-v2.p.rapidapi.com/channel/details",
            headers=headers,
            params={"channel_id": test_channel},
            timeout=10
        )

        return jsonify({
            'success': True,
            'data': {
                'status_code': response.status_code,
                'response': response.json() if response.status_code == 200 else response.text,
                'test_channel': test_channel
            }
        })

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# ================================
# üì∫ EXTRA√á√ÉO YOUTUBE
# ================================

@automations_bp.route('/extract-youtube', methods=['POST'])
def extract_youtube_channel_content():
    """Extrair conte√∫do de canal do YouTube usando RapidAPI"""
    try:
        data = request.get_json()
        url = data.get('url', '').strip()
        api_key = data.get('api_key', '').strip()
        config = data.get('config', {})

        print(f"üîç DEBUG: Recebida requisi√ß√£o - URL: {url}, Config: {config}")

        if not url:
            return jsonify({
                'success': False,
                'error': 'URL ou ID do canal √© obrigat√≥rio'
            }), 400

        if not api_key:
            return jsonify({
                'success': False,
                'error': 'Chave da API RapidAPI √© obrigat√≥ria'
            }), 400
        
        # Determinar se √© ID do canal ou URL/nome
        channel_id = None
        channel_name = None

        if url.startswith('UC') and len(url) == 24:
            channel_id = url
            print(f"üîç DEBUG: Usando ID do canal diretamente: {channel_id}")
        else:
            # Tentar extrair ID do canal da URL
            channel_id = extract_channel_id_from_url(url)

            if channel_id:
                print(f"üîç DEBUG: ID do canal extra√≠do da URL: {channel_id}")
            else:
                # Extrair nome do canal para busca
                channel_name = extract_channel_name_or_id(url)
                print(f"üîç DEBUG: Nome extra√≠do do canal: {channel_name}")

                if not channel_name:
                    return jsonify({
                        'success': False,
                        'error': 'Formato inv√°lido. Use: Nome do canal, @handle, URL completa ou ID do canal'
                    }), 400

                # Obter ID do canal usando a API
                print(f"üîç DEBUG: Buscando ID do canal para: {channel_name}")
                channel_id_result = get_channel_id_rapidapi(channel_name, api_key)
                print(f"üîç DEBUG: Resultado da busca do ID: {channel_id_result}")

                if not channel_id_result['success']:
                    return jsonify(channel_id_result), 400

                channel_id = channel_id_result['data']['channel_id']
                print(f"üîç DEBUG: ID do canal obtido: {channel_id}")

        # Obter v√≠deos do canal
        print(f"üîç DEBUG: Buscando v√≠deos do canal: {channel_id}")
        videos_result = get_channel_videos_rapidapi(channel_id, api_key)
        print(f"üîç DEBUG: Resultado da busca de v√≠deos: {videos_result.get('success', False)}, Total: {len(videos_result.get('data', {}).get('videos', []))}")
        if not videos_result['success']:
            return jsonify(videos_result), 400
        
        # Obter detalhes do canal
        channel_details = get_channel_details_rapidapi(channel_id, api_key)
        
        # Filtrar v√≠deos baseado na configura√ß√£o
        original_videos = videos_result['data']['videos']
        print(f"üîç DEBUG: V√≠deos antes do filtro: {len(original_videos)}")
        print(f"üîç DEBUG: Configura√ß√£o de filtros: {config}")

        filtered_videos = filter_videos_by_config(original_videos, config)
        print(f"üîç DEBUG: V√≠deos ap√≥s filtro: {len(filtered_videos)}")

        return jsonify({
            'success': True,
            'data': {
                'channel_id': channel_id,
                'channel_name': channel_details['data']['title'] if channel_details['success'] else (channel_name or channel_id),
                'channel_description': channel_details['data']['description'] if channel_details['success'] else '',
                'videos': filtered_videos,
                'total_videos': len(filtered_videos),
                'total_views': sum(int(video.get('views', 0)) for video in filtered_videos),
                'total_likes': sum(int(video.get('like_count', 0)) for video in filtered_videos)
            }
        })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500

# ================================
# üéØ GERA√á√ÉO DE T√çTULOS
# ================================

@automations_bp.route('/generate-titles', methods=['POST'])
def generate_titles_with_ai():
    """Gerar t√≠tulos usando diferentes agentes de IA"""
    try:
        data = request.get_json()
        agent = data.get('agent', 'gemini').lower()
        api_key = data.get('api_key', '').strip()
        instructions = data.get('instructions', '').strip()
        source_titles = data.get('source_titles', [])
        
        if not api_key:
            return jsonify({
                'success': False,
                'error': f'Chave da API {agent.upper()} √© obrigat√≥ria'
            }), 400
        
        if not source_titles:
            return jsonify({
                'success': False,
                'error': 'T√≠tulos de origem s√£o obrigat√≥rios'
            }), 400
        
        if not instructions:
            instructions = 'Crie t√≠tulos virais e chamativos baseados nos t√≠tulos fornecidos.'
        
        # Gerar t√≠tulos baseado no agente selecionado
        if agent == 'chatgpt' or agent == 'openai':
            result = generate_titles_with_openai(source_titles, instructions, api_key)
        elif agent == 'claude':
            result = generate_titles_with_claude(source_titles, instructions, api_key)
        elif agent == 'gemini':
            result = generate_titles_with_gemini(source_titles, instructions, api_key)
        elif agent == 'openrouter':
            result = generate_titles_with_openrouter(source_titles, instructions, api_key)
        else:
            return jsonify({
                'success': False,
                'error': f'Agente {agent} n√£o suportado'
            }), 400
        
        return jsonify(result)
    
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500

# ================================
# üìù GERA√á√ÉO DE ROTEIROS
# ================================

@automations_bp.route('/generate-script', methods=['POST'])
def generate_script_chapters():
    """Gerar roteiro completo com m√∫ltiplos cap√≠tulos"""
    try:
        data = request.get_json()
        agent = data.get('agent', 'openai').lower()
        api_key = data.get('api_key', '').strip()
        title = data.get('title', '').strip()
        context = data.get('context', '').strip()
        num_chapters = data.get('num_chapters', 10)
        
        if not api_key:
            return jsonify({
                'success': False,
                'error': f'Chave da API {agent.upper()} √© obrigat√≥ria'
            }), 400
        
        if not title:
            return jsonify({
                'success': False,
                'error': 'T√≠tulo √© obrigat√≥rio'
            }), 400
        
        # Gerar roteiro baseado no agente selecionado
        if agent == 'chatgpt' or agent == 'openai':
            result = generate_script_chapters_with_openai(title, context, num_chapters, api_key)
        elif agent == 'claude':
            result = generate_script_chapters_with_claude(title, context, num_chapters, api_key)
        elif agent == 'gemini':
            result = generate_script_chapters_with_gemini(title, context, num_chapters, api_key)
        elif agent == 'openrouter':
            result = generate_script_chapters_with_openrouter(title, context, num_chapters, api_key)
        else:
            return jsonify({
                'success': False,
                'error': f'Agente {agent} n√£o suportado'
            }), 400
        
        return jsonify(result)

    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500

# ================================
# üé≠ GERA√á√ÉO DE PREMISSAS
# ================================

@automations_bp.route('/generate-premise', methods=['POST'])
def generate_premise_with_ai():
    """Gerar premissa narrativa usando diferentes agentes de IA"""
    try:
        data = request.get_json()
        agent = data.get('agent', 'gemini').lower()
        api_key = data.get('api_key', '').strip()
        title = data.get('title', '').strip()
        resume = data.get('resume', '').strip()
        agent_prompt = data.get('agent_prompt', '').strip()

        if not api_key:
            return jsonify({
                'success': False,
                'error': f'Chave da API {agent.upper()} √© obrigat√≥ria'
            }), 400

        if not title:
            return jsonify({
                'success': False,
                'error': 'T√≠tulo √© obrigat√≥rio'
            }), 400

        # Usar prompt padr√£o se n√£o fornecido
        if not agent_prompt:
            agent_prompt = get_default_premise_prompt()

        # Gerar premissa baseado no agente selecionado
        if agent == 'chatgpt' or agent == 'openai':
            result = generate_premise_with_openai(title, resume, agent_prompt, api_key)
        elif agent == 'claude':
            result = generate_premise_with_claude(title, resume, agent_prompt, api_key)
        elif agent == 'gemini':
            result = generate_premise_with_gemini(title, resume, agent_prompt, api_key)
        elif agent == 'openrouter':
            result = generate_premise_with_openrouter(title, resume, agent_prompt, api_key)
        else:
            return jsonify({
                'success': False,
                'error': f'Agente {agent} n√£o suportado'
            }), 400

        return jsonify(result)

    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500

# ================================
# üé§ TEXT-TO-SPEECH
# ================================

@automations_bp.route('/generate-tts', methods=['POST'])
def generate_tts_gemini():
    """Gerar √°udio TTS usando Gemini 2.5"""
    try:
        data = request.get_json()
        text = data.get('text', '').strip()
        api_key = data.get('api_key', '').strip()
        voice_name = data.get('voice_name', 'Kore')
        model = data.get('model', 'gemini-2.5-flash-preview-tts')

        if not text:
            return jsonify({
                'success': False,
                'error': 'Texto √© obrigat√≥rio'
            }), 400

        if not api_key:
            return jsonify({
                'success': False,
                'error': 'Chave da API Gemini √© obrigat√≥ria'
            }), 400

        if not GOOGLE_GENAI_TTS_AVAILABLE:
            return jsonify({
                'success': False,
                'error': 'Biblioteca google-genai n√£o instalada'
            }), 400

        # Gerar √°udio TTS usando Gemini
        result = generate_tts_with_gemini(text, api_key, voice_name, model)
        return jsonify(result)

    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500

# ================================
# üìä LOGS DE AUTOMA√á√ïES
# ================================

@automations_bp.route('/logs', methods=['GET'])
def get_automation_logs():
    """Obter logs de automa√ß√µes"""
    try:
        from app import AutomationLog
        
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 20, type=int)
        automation_type = request.args.get('type', None)
        
        query = AutomationLog.query
        
        if automation_type:
            query = query.filter_by(automation_type=automation_type)
        
        logs = query.order_by(AutomationLog.created_at.desc()).paginate(
            page=page, per_page=per_page, error_out=False
        )
        
        return jsonify({
            'success': True,
            'data': {
                'logs': [log.to_dict() for log in logs.items],
                'total': logs.total,
                'pages': logs.pages,
                'current_page': page,
                'per_page': per_page
            }
        })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# ================================
# üõ†Ô∏è FUN√á√ïES AUXILIARES
# ================================

def extract_channel_id_from_url(url):
    """Extrair ID do canal da URL do YouTube"""
    import re

    # Se j√° for um ID de canal
    if url.startswith('UC') and len(url) == 24:
        return url

    # Padr√£o para URL com ID do canal
    channel_id_pattern = r'youtube\.com/channel/(UC[a-zA-Z0-9_-]{22})'
    match = re.search(channel_id_pattern, url)
    if match:
        return match.group(1)

    # Para outros formatos (@handle, /c/, /user/), n√£o podemos extrair o ID diretamente
    # pois a API de busca n√£o est√° funcionando
    return None

def extract_channel_name_or_id(input_str):
    """Extrair nome ou ID do canal de URL do YouTube"""
    input_str = input_str.strip()

    if input_str.startswith('UC') and len(input_str) == 24:
        return input_str

    patterns = [
        r'youtube\.com/@([^/?&\s]+)',
        r'youtube\.com/c/([^/?&\s]+)',
        r'youtube\.com/channel/([^/?&\s]+)',
        r'youtube\.com/user/([^/?&\s]+)',
        r'^@([^/?&\s]+)$',
        r'^([^/?&\s@]+)$'
    ]

    for pattern in patterns:
        match = re.search(pattern, input_str)
        if match:
            extracted = match.group(1)
            if extracted.startswith('UC') and len(extracted) == 24:
                return extracted
            return extracted

    return None

def get_channel_id_rapidapi(channel_name, api_key):
    """Obter ID do canal usando RapidAPI YouTube V2"""
    try:
        url = "https://youtube-v2.p.rapidapi.com/channel/id"

        headers = {
            "X-RapidAPI-Key": api_key,
            "X-RapidAPI-Host": "youtube-v2.p.rapidapi.com"
        }

        params = {"channel_name": channel_name}

        print(f"üîç DEBUG: Buscando ID do canal para: {channel_name}")
        print(f"üîç DEBUG: URL: {url}")
        print(f"üîç DEBUG: Params: {params}")

        # Tentar com retry em caso de timeout
        max_retries = 3
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, params=params, timeout=30)
                print(f"üîç DEBUG: Status da resposta: {response.status_code}")
                break  # Se chegou aqui, a requisi√ß√£o foi bem-sucedida
            except requests.exceptions.Timeout:
                if attempt == max_retries - 1:  # √öltima tentativa
                    raise
                print(f"üîÑ Tentativa {attempt + 1} falhou (timeout), tentando novamente...")
                continue

        if response.status_code != 200:
            print(f"üîç DEBUG: Erro na resposta: {response.text}")
            return {
                'success': False,
                'error': f'Erro na API RapidAPI: {response.status_code} - {response.text}'
            }

        data = response.json()
        print(f"üîç DEBUG: Resposta da API: {data}")

        if 'channel_id' not in data:
            return {
                'success': False,
                'error': 'Canal n√£o encontrado'
            }

        return {
            'success': True,
            'data': {
                'channel_id': data['channel_id'],
                'channel_name': data.get('channel_name', channel_name)
            }
        }

    except Exception as e:
        return {
            'success': False,
            'error': f'Erro ao buscar ID do canal: {str(e)}'
        }

def get_channel_details_rapidapi(channel_id, api_key):
    """Obter detalhes do canal usando RapidAPI YouTube V2"""
    try:
        url = "https://youtube-v2.p.rapidapi.com/channel/details"

        headers = {
            "X-RapidAPI-Key": api_key,
            "X-RapidAPI-Host": "youtube-v2.p.rapidapi.com"
        }

        params = {"channel_id": channel_id}

        response = requests.get(url, headers=headers, params=params, timeout=10)

        if response.status_code != 200:
            return {
                'success': False,
                'error': f'Erro ao buscar detalhes do canal: {response.status_code}'
            }

        data = response.json()

        return {
            'success': True,
            'data': {
                'title': data.get('title', ''),
                'description': data.get('description', ''),
                'subscriber_count': data.get('subscriber_count', 0),
                'video_count': data.get('video_count', 0)
            }
        }

    except Exception as e:
        return {
            'success': False,
            'error': f'Erro ao buscar detalhes do canal: {str(e)}'
        }

def get_channel_videos_rapidapi(channel_id, api_key, max_results=50):
    """Obter v√≠deos do canal usando RapidAPI YouTube V2"""
    try:
        url = "https://youtube-v2.p.rapidapi.com/channel/videos"
        print(f"üîç DEBUG: Fazendo requisi√ß√£o para: {url}")
        print(f"üîç DEBUG: Channel ID: {channel_id}")

        headers = {
            "X-RapidAPI-Key": api_key,
            "X-RapidAPI-Host": "youtube-v2.p.rapidapi.com"
        }

        params = {
            "channel_id": channel_id,
            "max_results": min(max_results, 50)  # Limite da API
        }
        print(f"üîç DEBUG: Par√¢metros: {params}")

        # Tentar com retry em caso de timeout
        max_retries = 3
        for attempt in range(max_retries):
            try:
                response = requests.get(url, headers=headers, params=params, timeout=30)
                print(f"üîç DEBUG: Status da resposta: {response.status_code}")
                break  # Se chegou aqui, a requisi√ß√£o foi bem-sucedida
            except requests.exceptions.Timeout:
                if attempt == max_retries - 1:  # √öltima tentativa
                    print(f"üîç DEBUG: Timeout ap√≥s {max_retries} tentativas")
                    raise
                print(f"üîÑ Tentativa {attempt + 1} falhou (timeout), tentando novamente...")
                continue

        if response.status_code != 200:
            print(f"üîç DEBUG: Erro na resposta: {response.text}")
            return {
                'success': False,
                'error': f'Erro ao buscar v√≠deos do canal: {response.status_code}'
            }

        data = response.json()
        print(f"üîç DEBUG: Resposta da API: {data}")

        if 'videos' not in data:
            print(f"üîç DEBUG: Chaves dispon√≠veis na resposta: {list(data.keys())}")
            return {
                'success': False,
                'error': 'Nenhum v√≠deo encontrado no canal'
            }

        print(f"üîç DEBUG: Encontrados {len(data['videos'])} v√≠deos na resposta")

        # Processar dados dos v√≠deos
        videos = []
        for i, video in enumerate(data['videos']):
            if i < 3:  # Log apenas os primeiros 3 v√≠deos para debug
                print(f"üîç DEBUG: V√≠deo {i+1}: {video}")

            # A API RapidAPI retorna 'number_of_views' como inteiro
            processed_video = {
                'video_id': video.get('video_id', ''),
                'title': video.get('title', ''),
                'description': video.get('description', ''),
                'thumbnail': video.get('thumbnail', ''),
                'duration': video.get('video_length', ''),  # API usa 'video_length'
                'views': parse_view_count(video.get('number_of_views', 0)),  # API usa 'number_of_views'
                'likes': parse_count(video.get('likes', '0')),
                'published_at': video.get('published_time', ''),  # API usa 'published_time'
                'url': f"https://youtube.com/watch?v={video.get('video_id', '')}"
            }
            videos.append(processed_video)

            if i < 3:  # Log apenas os primeiros 3 v√≠deos processados
                print(f"üîç DEBUG: V√≠deo processado {i+1}: views={processed_video['views']}, title={processed_video['title'][:50]}...")

        return {
            'success': True,
            'data': {
                'videos': videos,
                'total_videos': len(videos),
                'total_count': len(videos),
                'message': f'‚úÖ {len(videos)} t√≠tulos extra√≠dos com sucesso!'
            }
        }

    except Exception as e:
        return {
            'success': False,
            'error': f'Erro ao buscar v√≠deos: {str(e)}'
        }

def filter_videos_by_config(videos, config):
    """Filtrar v√≠deos baseado na configura√ß√£o fornecida"""
    if not videos:
        print("üîç DEBUG: Nenhum v√≠deo para filtrar")
        return []

    print(f"üîç DEBUG: Iniciando filtros com {len(videos)} v√≠deos")
    filtered = videos.copy()

    # Filtro por views m√≠nimas
    min_views = config.get('min_views', 0)
    print(f"üîç DEBUG: Filtro min_views: {min_views}")
    if min_views > 0:
        before_count = len(filtered)
        filtered = [v for v in filtered if v.get('views', 0) >= min_views]
        print(f"üîç DEBUG: Ap√≥s filtro min_views: {before_count} -> {len(filtered)}")
        if len(filtered) > 0:
            print(f"üîç DEBUG: Exemplo de v√≠deo que passou: views={filtered[0].get('views', 0)}")

    # Filtro por views m√°ximas (s√≥ aplicar se for maior que 0)
    max_views = config.get('max_views', 0)
    if max_views > 0:
        print(f"üîç DEBUG: Filtro max_views: {max_views}")
        before_count = len(filtered)
        filtered = [v for v in filtered if v.get('views', 0) <= max_views]
        print(f"üîç DEBUG: Ap√≥s filtro max_views: {before_count} -> {len(filtered)}")
    else:
        print(f"üîç DEBUG: Filtro max_views: {max_views} (ignorado - sem limite m√°ximo)")

    # Filtro por dias (DESABILITADO - API usa formato relativo como "20 hours ago")
    days_filter = config.get('days', 0)
    print(f"üîç DEBUG: Filtro de dias: {days_filter} (DESABILITADO)")
    print(f"üîç DEBUG: Ap√≥s filtro de dias: {len(filtered)} (todos mantidos)")

    # Limitar n√∫mero m√°ximo de t√≠tulos
    max_titles = config.get('max_titles', 50)
    if max_titles > 0:
        before_limit = len(filtered)
        filtered = filtered[:max_titles]
        print(f"üîç DEBUG: Limitando t√≠tulos: {before_limit} -> {len(filtered)} (max: {max_titles})")

    print(f"üîç DEBUG: RESULTADO FINAL: {len(filtered)} v√≠deos")
    if filtered:
        print(f"üîç DEBUG: Primeiro t√≠tulo: {filtered[0].get('title', 'N/A')}")
        print(f"üîç DEBUG: Primeiros 3 t√≠tulos:")
        for i, video in enumerate(filtered[:3]):
            print(f"üîç DEBUG: {i+1}. {video.get('title', 'N/A')} ({video.get('views', 0)} views)")
    else:
        print(f"üîç DEBUG: ‚ùå NENHUM V√çDEO NO RESULTADO FINAL!")

    return filtered

def parse_view_count(view_input):
    """Converter string ou n√∫mero de views para n√∫mero inteiro"""
    if not view_input:
        return 0

    # Se j√° for um n√∫mero inteiro, retornar diretamente
    if isinstance(view_input, int):
        return view_input

    # Se for float, converter para int
    if isinstance(view_input, float):
        return int(view_input)

    # Converter para string e processar
    view_str = str(view_input).lower().replace(',', '').replace('.', '')

    # Extrair apenas n√∫meros e multiplicadores
    import re
    match = re.search(r'([\d,\.]+)\s*([kmb]?)', view_str)
    if not match:
        return 0

    number_str, multiplier = match.groups()
    try:
        number = float(number_str.replace(',', ''))

        if multiplier == 'k':
            return int(number * 1000)
        elif multiplier == 'm':
            return int(number * 1000000)
        elif multiplier == 'b':
            return int(number * 1000000000)
        else:
            return int(number)
    except ValueError:
        return 0

def parse_count(count_str):
    """Converter string de contagem para n√∫mero"""
    if not count_str:
        return 0

    try:
        # Remover caracteres n√£o num√©ricos exceto pontos e v√≠rgulas
        clean_str = re.sub(r'[^\d,\.]', '', str(count_str))
        if clean_str:
            return int(float(clean_str.replace(',', '')))
    except ValueError:
        pass

    return 0

@automations_bp.route('/generate-titles', methods=['POST'])
def generate_titles():
    """Gerar t√≠tulos virais baseados em t√≠tulos extra√≠dos"""
    try:
        data = request.get_json()

        # Validar dados de entrada
        source_titles = data.get('source_titles', [])
        topic = data.get('topic', '')
        count = data.get('count', 10)
        style = data.get('style', 'viral')
        ai_provider = data.get('ai_provider', 'auto')  # 'openai', 'gemini', 'auto'

        if not source_titles:
            return jsonify({
                'success': False,
                'error': 'T√≠tulos de origem s√£o obrigat√≥rios'
            }), 400

        if not topic:
            return jsonify({
                'success': False,
                'error': 'T√≥pico √© obrigat√≥rio'
            }), 400

        # Carregar chaves de API
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'api_keys.json')
        api_keys = {}

        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                api_keys = json.load(f)

        # Inicializar gerador de t√≠tulos
        title_generator = TitleGenerator()

        # Configurar IAs dispon√≠veis
        openai_configured = False
        gemini_configured = False

        if api_keys.get('openai'):
            openai_configured = title_generator.configure_openai(api_keys['openai'])

        if api_keys.get('gemini'):
            gemini_configured = title_generator.configure_gemini(api_keys['gemini'])

        if not openai_configured and not gemini_configured:
            return jsonify({
                'success': False,
                'error': 'Nenhuma IA configurada. Configure OpenAI ou Gemini nas configura√ß√µes.'
            }), 400

        print(f"ü§ñ Gerando t√≠tulos sobre '{topic}' baseado em {len(source_titles)} t√≠tulos de refer√™ncia")

        # Gerar t√≠tulos baseado no provider escolhido
        if ai_provider == 'openai' and openai_configured:
            generated_titles = title_generator.generate_titles_openai(source_titles, topic, count, style)
            results = {
                'generated_titles': generated_titles,
                'ai_provider_used': 'openai',
                'patterns_analysis': title_generator.analyze_viral_patterns(source_titles)
            }
        elif ai_provider == 'gemini' and gemini_configured:
            generated_titles = title_generator.generate_titles_gemini(source_titles, topic, count, style)
            results = {
                'generated_titles': generated_titles,
                'ai_provider_used': 'gemini',
                'patterns_analysis': title_generator.analyze_viral_patterns(source_titles)
            }
        else:
            # Modo autom√°tico - usar h√≠brido ou o que estiver dispon√≠vel
            results = title_generator.generate_titles_hybrid(source_titles, topic, count, style)

        if results.get('success', True) and (results.get('generated_titles') or results.get('combined_titles')):
            final_titles = results.get('combined_titles') or results.get('generated_titles', [])

            return jsonify({
                'success': True,
                'data': {
                    'generated_titles': final_titles,
                    'total_generated': len(final_titles),
                    'ai_provider_used': results.get('ai_provider_used', 'hybrid'),
                    'patterns_analysis': results.get('patterns_analysis', {}),
                    'source_titles_count': len(source_titles),
                    'topic': topic,
                    'style': style
                }
            })
        else:
            return jsonify({
                'success': False,
                'error': results.get('error', 'Falha na gera√ß√£o de t√≠tulos')
            }), 500

    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de t√≠tulos: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@automations_bp.route('/analyze-titles', methods=['POST'])
def analyze_titles():
    """Analisar padr√µes virais em uma lista de t√≠tulos"""
    try:
        data = request.get_json()
        titles = data.get('titles', [])

        if not titles:
            return jsonify({
                'success': False,
                'error': 'Lista de t√≠tulos √© obrigat√≥ria'
            }), 400

        # Inicializar gerador para usar a an√°lise
        title_generator = TitleGenerator()
        patterns = title_generator.analyze_viral_patterns(titles)

        return jsonify({
            'success': True,
            'data': {
                'patterns': patterns,
                'total_titles_analyzed': len(titles),
                'analysis_summary': {
                    'most_common_triggers': patterns['emotional_triggers'][:5],
                    'popular_numbers': patterns['numbers'][:3],
                    'effective_structures': patterns['structures'],
                    'optimal_length': f"{patterns['length_stats']['min']}-{patterns['length_stats']['max']} chars"
                }
            }
        })

    except Exception as e:
        print(f"‚ùå Erro na an√°lise de t√≠tulos: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@automations_bp.route('/generate-titles-custom', methods=['POST'])
def generate_titles_custom():
    """Gerar t√≠tulos usando prompt personalizado baseado em t√≠tulos extra√≠dos"""
    try:
        data = request.get_json()

        # Validar dados de entrada
        source_titles = data.get('source_titles', [])
        custom_prompt = data.get('custom_prompt', '')
        count = data.get('count', 10)
        ai_provider = data.get('ai_provider', 'auto')  # 'openai', 'gemini', 'auto'

        if not source_titles:
            return jsonify({
                'success': False,
                'error': 'T√≠tulos de origem s√£o obrigat√≥rios'
            }), 400

        if not custom_prompt.strip():
            return jsonify({
                'success': False,
                'error': 'Prompt personalizado √© obrigat√≥rio'
            }), 400

        # Carregar chaves de API
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'api_keys.json')
        api_keys = {}

        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                api_keys = json.load(f)

        # Inicializar gerador de t√≠tulos
        title_generator = TitleGenerator()

        # Configurar IAs dispon√≠veis
        openai_configured = False
        gemini_configured = False

        if api_keys.get('openai'):
            openai_configured = title_generator.configure_openai(api_keys['openai'])

        if api_keys.get('gemini'):
            gemini_configured = title_generator.configure_gemini(api_keys['gemini'])

        if not openai_configured and not gemini_configured:
            return jsonify({
                'success': False,
                'error': 'Nenhuma IA configurada. Configure OpenAI ou Gemini nas configura√ß√µes.'
            }), 400

        print(f"üé® Gerando t√≠tulos com prompt personalizado baseado em {len(source_titles)} t√≠tulos")
        print(f"üìù Prompt: {custom_prompt[:100]}...")

        # Gerar t√≠tulos com prompt personalizado
        results = title_generator.generate_titles_with_custom_prompt(
            source_titles,
            custom_prompt,
            count,
            ai_provider
        )

        if results.get('success', False):
            return jsonify({
                'success': True,
                'data': {
                    'generated_titles': results['generated_titles'],
                    'total_generated': len(results['generated_titles']),
                    'ai_provider_used': results['ai_provider_used'],
                    'patterns_analysis': results['patterns_analysis'],
                    'source_titles_count': len(source_titles),
                    'custom_prompt_used': results['custom_prompt_used']
                }
            })
        else:
            return jsonify({
                'success': False,
                'error': results.get('error', 'Falha na gera√ß√£o de t√≠tulos com prompt personalizado')
            }), 500

    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o com prompt personalizado: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
